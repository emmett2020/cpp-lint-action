name: Build and Run Unit Tests on Ubuntu 24.04
on:
  pull_request:
    branches: [master]

env:
  NINJA_VERSION: 1.12.1
  CCACHE_VERSION: 4.10.2

jobs:
  build-unit-tests:
    name: "ubuntu-24.04-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.build_type }}"
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # Details: https://github.com/actions/runner-images
          - { compiler: "gcc",   version: "12.3.0", build_type: Release, cxxflags: "" }
          - { compiler: "gcc",   version: "13.3.0", build_type: Release, cxxflags: "" }
          - { compiler: "gcc",   version: "14.2.0", build_type: Release, cxxflags: "" }
          - { compiler: "clang", version: "16.1.6", build_type: Release, cxxflags: "" }
          - { compiler: "clang", version: "18.1.3", build_type: Release, cxxflags: "" }

    steps:
      - name: Cache Building Tools
        id: cache-building-tools
        uses: actions/cache@v4
        with:
          path: ~/.tools/
          key: building-tools-${{ runner.os }}
          restore-keys: |
            building-tools-${{ runner.os }}

      - name: Install Building Tools
        if: "${{ steps.cache-building-tools.outputs.cache-hit == false }}"
        run: |
          set -euo pipefail

          # ninja
          wget https://github.com/ninja-build/ninja/releases/download/v${NINJA_VERSION}/ninja-linux.zip
          unzip ninja-linux.zip -d ~/.tools/
          rm ninja-linux.zip

          # ccache
          wget https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz \
               -O ccache.tar.xz
          tar -xf ccache.tar.xz
          ls ccache-${CCACHE_VERSION}-linux-x86_64/ccache
          mv ccache-${CCACHE_VERSION}-linux-x86_64/ccache ~/.tools/
          ls -lrthR ~/.tools
          rm -rf ccache.tar.xz  ccache-${CCACHE_VERSION}-linux-x86_64/

      - name: Set Building Tools Path
        run: echo "${HOME}/.tools" >> ${GITHUB_PATH}

      - name: Install Compilation Dependent Libraries
        run: |
          set -euo pipefail
          sudo apt install -y libboost-all-dev \
                              libgit2-dev


      - name: Setup C/C++ Compiler and ccache
        run: |
          set -euo pipefail
          major=$(echo ${{ matrix.version }} | cut -d'.' -f1)
          if [[ "${{ matrix.compiler }}" == "clang" ]]; then
            echo "CC=clang-${major}" >> ${GITHUB_ENV}
            echo "CXX=clang++-${major}" >> ${GITHUB_ENV}
          else
            echo "CC=gcc-${major}" >> ${GITHUB_ENV}
            echo "CXX=g++-${major}" >> ${GITHUB_ENV}
          fi

          echo "CCACHE_DIR=$(realpath ~/.ccache)" >> ${GITHUB_ENV}
          ccache --version
          ccache --set-config=max_size=500M

      - name: Get Timestamp
        id: timestamp
        run: |
          timestamp=$(date +"%Y-%m-%d %H:%M:%S")
          echo "Current timestamp: ${timestamp}"
          echo "timestamp=${timestamp}" >> ${GITHUB_OUTPUT}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Restore ccache
        id: ccache-cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.build_type }}-${{ steps.timestamp.outputs.timestamp }}
          restore-keys: |
            ccache-${{ matrix.compiler }}-${{ matrix.version }}-${{ matrix.build_type }}-

      - name: Create Build Directory
        run: mkdir -p build

      - name: Cache CMake FetchContent
        id: cmake-fetchcontent-cache
        uses: actions/cache@v4
        with:
          path: build/_deps/
          key: cmake-fetchcontent-${{ runner.os }}
          restore-keys: |
            cmake-fetchcontent-${{ runner.os }}


      - name: DEBUG
        run: |

          ls -lrthR build/

      - name: CMake
        run: |
          set -euo pipefail

          cmake -S . -B build -GNinja                                   \
            -DCMAKE_CXX_FLAGS="${{ matrix.cxxflags }}"                  \
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"               \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache                          \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache                        \
            -DFETCHCONTENT_QUIET=off

      - name: Compile
        run: |
          cmake --build build -v -j8
          ccache -s -v

      - name: Run Unit Tests
        run: ./build/tests/test
